# 7.1[34]: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм.
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает,
# Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв)
# в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова,
# если во фразе несколько слов, то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами.
# Написать функцию, которая принимает строку текста и проверяет ее ритм (по Винни-Пуху)
# Если ритм есть, функция возвращает True, иначе возвращает False

# Примеры/Тесты:
#     <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам") -> True
#     <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> True
#     <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> False
#     <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> False
#     <function_name>("Пам-парам-пурум Пум-пурум-карам") -> True
# Примечание.

# Подумайте об эффективности алгоритма. Какие структуры данных будут более эффективны по скорости.
# Алгоритм должен работать так, чтобы не делать лишних проверок. Подумайте, возможно некоторые проверки не нужны.
# (*) Усложнение.

# Функция имеет параметр, который определяет, надо ли возвращать полную информацию о кол-ве гласных букв в фразах.
# Эта информация возвращается в виде списка словарей. Каждый элемент списка(словарь) соответствует фразе.

# Примеры/Тесты:
# 	<function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", False) -> True
#     <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", True) -> (True, [{'а': 4}, {'а': 4}, {'а': 4}])
#     <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> (True, [{'а': 4}, {'а': 2, 'у': 2}, {'а': 2, 'е': 1, 'о': 1}])  <---------
#     <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> (False, [{'а': 4}, {'а': 2, 'у': 3}])   <---------Ошибка. Не хватает {'а': 2, 'е': 1, 'о': 1} для 3-го слова
#     <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> (False, [{'а': 11}, {'у': 6, 'а': 3}])
#     <function_name>("Пам-парам-пурум Пум-пурум-карам") -> (True, [{'а': 3, 'у': 2}, {'у': 3, 'а': 2}])
from functools import reduce

def rythm(text:str, more_info=True):
    new_list = list()
    is_rythm = True
    count_vowels = list()
    for phrase in text.split():
        vowel = {'а': 0, 'е': 0, 'ё': 0, 'и' : 0, 'о' : 0, 'у' : 0, 'ы' : 0, 'ю' : 0, 'я' : 0}
        for letter in phrase:
            if vowel.get(letter) != None:
                vowel[letter] +=  + 1
        vowel_phrase = dict(map(lambda x : (x, vowel[x]), filter(lambda x : vowel[x] != 0, vowel)))
        count_vowels.append(reduce(lambda x, y : x + y, vowel_phrase.values()))
        new_list.append(vowel_phrase)
    is_rythm = True if is_rythm and len(set(count_vowels)) == 1 else False
    return (is_rythm, new_list) if more_info else is_rythm

print(rythm("пара-ра-рам рам-пам-папам па-ра-па-дам", False))
print(rythm("пара-ра-рам рам-пам-папам па-ра-па-дам", True))
print(rythm("пара-ра-рам рам-пум-пупам па-ре-по-дам"))
print(rythm("пара-ра-рам рам-пуум-пупам па-ре-по-дам"))
print(rythm("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па"))
print(rythm("Пам-парам-пурум Пум-пурум-карам"))